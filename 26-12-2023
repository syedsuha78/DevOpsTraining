#Service
apiVersion: v1
kind: Service
metadata:
  name: hello-svc
spec:
  selector:
    role: app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
      nodePort: 32000
  type: NodePort

#Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hello-deployment
  labels:
    role: app
spec:
  replicas: 2
  selector:
    matchLabels:
      role: app
  template:
    metadata:
      labels:
        role: app
    spec:
      containers:
      - name: app
        image: "{{ image_id }}"
        resources:
          requests:
            cpu: 10m

pipeline {
   agent any
   environment {
       registry = "magalixcorp/k8scicd"
       GOCACHE = "/tmp"
   }
   stages {
       stage('Build') {
           agent {
               docker {
                   image 'golang'
               }
           }
           steps {
               // Create our project directory.
               sh 'cd ${GOPATH}/src'
               sh 'mkdir -p ${GOPATH}/src/hello-world'
               // Copy all files in our Jenkins workspace to our project directory.
               sh 'cp -r ${WORKSPACE}/* ${GOPATH}/src/hello-world'
               // Build the app.
               sh 'go build'
  }
      }
      stage('Test') {
          agent {
              docker {
                  image 'golang'
              }
          }
          steps {
              // Create our project directory.
              sh 'cd ${GOPATH}/src'
              sh 'mkdir -p ${GOPATH}/src/hello-world'
              // Copy all files in our Jenkins workspace to our project directory.
              sh 'cp -r ${WORKSPACE}/* ${GOPATH}/src/hello-world'
              // Remove cached test results.
              sh 'go clean -cache'
             // Run Unit Tests.
             sh 'go test ./... -v -short'
          }
      }
      stage('Publish') {
          environment {
              registryCredential = 'dockerhub'
          }
          steps{
              script {
                  def appimage = docker.build registry + ":$BUILD_NUMBER"
                  docker.withRegistry( '', registryCredential ) {
                      appimage.push()
                      appimage.push('latest')
                  }
              }
          }
      }
      stage ('Deploy') {
          steps {
              script{
                  def image_id = registry + ":$BUILD_NUMBER"
                  sh "ansible-playbook playbook.yml --extra-vars \"image_id=${image_id}\""
              }
          }
      }
   }
}
